// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	rauc "github.com/holoplot/go-rauc/rauc"
	mock "github.com/stretchr/testify/mock"
)

// RaucDBUSClient is an autogenerated mock type for the raucDBUSClient type
type RaucDBUSClient struct {
	mock.Mock
}

type RaucDBUSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RaucDBUSClient) EXPECT() *RaucDBUSClient_Expecter {
	return &RaucDBUSClient_Expecter{mock: &_m.Mock}
}

// GetBootSlot provides a mock function with given fields:
func (_m *RaucDBUSClient) GetBootSlot() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaucDBUSClient_GetBootSlot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBootSlot'
type RaucDBUSClient_GetBootSlot_Call struct {
	*mock.Call
}

// GetBootSlot is a helper method to define mock.On call
func (_e *RaucDBUSClient_Expecter) GetBootSlot() *RaucDBUSClient_GetBootSlot_Call {
	return &RaucDBUSClient_GetBootSlot_Call{Call: _e.mock.On("GetBootSlot")}
}

func (_c *RaucDBUSClient_GetBootSlot_Call) Run(run func()) *RaucDBUSClient_GetBootSlot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RaucDBUSClient_GetBootSlot_Call) Return(_a0 string, _a1 error) *RaucDBUSClient_GetBootSlot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetCompatible provides a mock function with given fields:
func (_m *RaucDBUSClient) GetCompatible() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaucDBUSClient_GetCompatible_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompatible'
type RaucDBUSClient_GetCompatible_Call struct {
	*mock.Call
}

// GetCompatible is a helper method to define mock.On call
func (_e *RaucDBUSClient_Expecter) GetCompatible() *RaucDBUSClient_GetCompatible_Call {
	return &RaucDBUSClient_GetCompatible_Call{Call: _e.mock.On("GetCompatible")}
}

func (_c *RaucDBUSClient_GetCompatible_Call) Run(run func()) *RaucDBUSClient_GetCompatible_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RaucDBUSClient_GetCompatible_Call) Return(_a0 string, _a1 error) *RaucDBUSClient_GetCompatible_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOperation provides a mock function with given fields:
func (_m *RaucDBUSClient) GetOperation() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaucDBUSClient_GetOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperation'
type RaucDBUSClient_GetOperation_Call struct {
	*mock.Call
}

// GetOperation is a helper method to define mock.On call
func (_e *RaucDBUSClient_Expecter) GetOperation() *RaucDBUSClient_GetOperation_Call {
	return &RaucDBUSClient_GetOperation_Call{Call: _e.mock.On("GetOperation")}
}

func (_c *RaucDBUSClient_GetOperation_Call) Run(run func()) *RaucDBUSClient_GetOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RaucDBUSClient_GetOperation_Call) Return(_a0 string, _a1 error) *RaucDBUSClient_GetOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProgress provides a mock function with given fields:
func (_m *RaucDBUSClient) GetProgress() (int32, string, int32, error) {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int32
	if rf, ok := ret.Get(2).(func() int32); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int32)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RaucDBUSClient_GetProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProgress'
type RaucDBUSClient_GetProgress_Call struct {
	*mock.Call
}

// GetProgress is a helper method to define mock.On call
func (_e *RaucDBUSClient_Expecter) GetProgress() *RaucDBUSClient_GetProgress_Call {
	return &RaucDBUSClient_GetProgress_Call{Call: _e.mock.On("GetProgress")}
}

func (_c *RaucDBUSClient_GetProgress_Call) Run(run func()) *RaucDBUSClient_GetProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RaucDBUSClient_GetProgress_Call) Return(percentage int32, message string, nestingDepth int32, err error) *RaucDBUSClient_GetProgress_Call {
	_c.Call.Return(percentage, message, nestingDepth, err)
	return _c
}

// GetSlotStatus provides a mock function with given fields:
func (_m *RaucDBUSClient) GetSlotStatus() ([]rauc.SlotStatus, error) {
	ret := _m.Called()

	var r0 []rauc.SlotStatus
	if rf, ok := ret.Get(0).(func() []rauc.SlotStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rauc.SlotStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RaucDBUSClient_GetSlotStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlotStatus'
type RaucDBUSClient_GetSlotStatus_Call struct {
	*mock.Call
}

// GetSlotStatus is a helper method to define mock.On call
func (_e *RaucDBUSClient_Expecter) GetSlotStatus() *RaucDBUSClient_GetSlotStatus_Call {
	return &RaucDBUSClient_GetSlotStatus_Call{Call: _e.mock.On("GetSlotStatus")}
}

func (_c *RaucDBUSClient_GetSlotStatus_Call) Run(run func()) *RaucDBUSClient_GetSlotStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RaucDBUSClient_GetSlotStatus_Call) Return(status []rauc.SlotStatus, err error) *RaucDBUSClient_GetSlotStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

// InstallBundle provides a mock function with given fields: filename, options
func (_m *RaucDBUSClient) InstallBundle(filename string, options rauc.InstallBundleOptions) error {
	ret := _m.Called(filename, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, rauc.InstallBundleOptions) error); ok {
		r0 = rf(filename, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RaucDBUSClient_InstallBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallBundle'
type RaucDBUSClient_InstallBundle_Call struct {
	*mock.Call
}

// InstallBundle is a helper method to define mock.On call
//   - filename string
//   - options rauc.InstallBundleOptions
func (_e *RaucDBUSClient_Expecter) InstallBundle(filename interface{}, options interface{}) *RaucDBUSClient_InstallBundle_Call {
	return &RaucDBUSClient_InstallBundle_Call{Call: _e.mock.On("InstallBundle", filename, options)}
}

func (_c *RaucDBUSClient_InstallBundle_Call) Run(run func(filename string, options rauc.InstallBundleOptions)) *RaucDBUSClient_InstallBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(rauc.InstallBundleOptions))
	})
	return _c
}

func (_c *RaucDBUSClient_InstallBundle_Call) Return(_a0 error) *RaucDBUSClient_InstallBundle_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRaucDBUSClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRaucDBUSClient creates a new instance of RaucDBUSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRaucDBUSClient(t mockConstructorTestingTNewRaucDBUSClient) *RaucDBUSClient {
	mock := &RaucDBUSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
